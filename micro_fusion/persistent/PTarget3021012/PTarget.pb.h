// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTarget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTarget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTarget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTarget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTarget_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PTarget_2eproto;
class PCoordinate;
struct PCoordinateDefaultTypeInternal;
extern PCoordinateDefaultTypeInternal _PCoordinate_default_instance_;
class PIndexPoint;
struct PIndexPointDefaultTypeInternal;
extern PIndexPointDefaultTypeInternal _PIndexPoint_default_instance_;
class PIndexPointArray;
struct PIndexPointArrayDefaultTypeInternal;
extern PIndexPointArrayDefaultTypeInternal _PIndexPointArray_default_instance_;
class PMat;
struct PMatDefaultTypeInternal;
extern PMatDefaultTypeInternal _PMat_default_instance_;
class PTarget;
struct PTargetDefaultTypeInternal;
extern PTargetDefaultTypeInternal _PTarget_default_instance_;
class PTargetArray;
struct PTargetArrayDefaultTypeInternal;
extern PTargetArrayDefaultTypeInternal _PTargetArray_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PCoordinate* Arena::CreateMaybeMessage<::PCoordinate>(Arena*);
template<> ::PIndexPoint* Arena::CreateMaybeMessage<::PIndexPoint>(Arena*);
template<> ::PIndexPointArray* Arena::CreateMaybeMessage<::PIndexPointArray>(Arena*);
template<> ::PMat* Arena::CreateMaybeMessage<::PMat>(Arena*);
template<> ::PTarget* Arena::CreateMaybeMessage<::PTarget>(Arena*);
template<> ::PTargetArray* Arena::CreateMaybeMessage<::PTargetArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PMat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PMat) */ {
 public:
  inline PMat() : PMat(nullptr) {}
  ~PMat() override;
  explicit PROTOBUF_CONSTEXPR PMat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMat(const PMat& from);
  PMat(PMat&& from) noexcept
    : PMat() {
    *this = ::std::move(from);
  }

  inline PMat& operator=(const PMat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMat& operator=(PMat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMat* internal_default_instance() {
    return reinterpret_cast<const PMat*>(
               &_PMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PMat& a, PMat& b) {
    a.Swap(&b);
  }
  inline void Swap(PMat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMat& from) {
    PMat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PMat";
  }
  protected:
  explicit PMat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSizeFieldNumber = 2,
    kColsFieldNumber = 3,
    kRowsFieldNumber = 4,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int32 cols = 3;
  void clear_cols();
  int32_t cols() const;
  void set_cols(int32_t value);
  private:
  int32_t _internal_cols() const;
  void _internal_set_cols(int32_t value);
  public:

  // int32 rows = 4;
  void clear_rows();
  int32_t rows() const;
  void set_rows(int32_t value);
  private:
  int32_t _internal_rows() const;
  void _internal_set_rows(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PMat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int64_t size_;
    int32_t cols_;
    int32_t rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTarget_2eproto;
};
// -------------------------------------------------------------------

class PCoordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PCoordinate) */ {
 public:
  inline PCoordinate() : PCoordinate(nullptr) {}
  ~PCoordinate() override;
  explicit PROTOBUF_CONSTEXPR PCoordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCoordinate(const PCoordinate& from);
  PCoordinate(PCoordinate&& from) noexcept
    : PCoordinate() {
    *this = ::std::move(from);
  }

  inline PCoordinate& operator=(const PCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCoordinate& operator=(PCoordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCoordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCoordinate* internal_default_instance() {
    return reinterpret_cast<const PCoordinate*>(
               &_PCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PCoordinate& a, PCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(PCoordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCoordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCoordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCoordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PCoordinate& from) {
    PCoordinate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCoordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PCoordinate";
  }
  protected:
  explicit PCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PCoordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTarget_2eproto;
};
// -------------------------------------------------------------------

class PTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PTarget) */ {
 public:
  inline PTarget() : PTarget(nullptr) {}
  ~PTarget() override;
  explicit PROTOBUF_CONSTEXPR PTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTarget(const PTarget& from);
  PTarget(PTarget&& from) noexcept
    : PTarget() {
    *this = ::std::move(from);
  }

  inline PTarget& operator=(const PTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTarget& operator=(PTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTarget* internal_default_instance() {
    return reinterpret_cast<const PTarget*>(
               &_PTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PTarget& a, PTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(PTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PTarget& from) {
    PTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTarget";
  }
  protected:
  explicit PTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kImageFieldNumber = 3,
    kPositionFieldNumber = 4,
    kTimeStampFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .PMat image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::PMat& image() const;
  PROTOBUF_NODISCARD ::PMat* release_image();
  ::PMat* mutable_image();
  void set_allocated_image(::PMat* image);
  private:
  const ::PMat& _internal_image() const;
  ::PMat* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::PMat* image);
  ::PMat* unsafe_arena_release_image();

  // .PCoordinate position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::PCoordinate& position() const;
  PROTOBUF_NODISCARD ::PCoordinate* release_position();
  ::PCoordinate* mutable_position();
  void set_allocated_position(::PCoordinate* position);
  private:
  const ::PCoordinate& _internal_position() const;
  ::PCoordinate* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::PCoordinate* position);
  ::PCoordinate* unsafe_arena_release_position();

  // int64 time_stamp = 5;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PMat* image_;
    ::PCoordinate* position_;
    int64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTarget_2eproto;
};
// -------------------------------------------------------------------

class PTargetArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PTargetArray) */ {
 public:
  inline PTargetArray() : PTargetArray(nullptr) {}
  ~PTargetArray() override;
  explicit PROTOBUF_CONSTEXPR PTargetArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTargetArray(const PTargetArray& from);
  PTargetArray(PTargetArray&& from) noexcept
    : PTargetArray() {
    *this = ::std::move(from);
  }

  inline PTargetArray& operator=(const PTargetArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTargetArray& operator=(PTargetArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTargetArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTargetArray* internal_default_instance() {
    return reinterpret_cast<const PTargetArray*>(
               &_PTargetArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PTargetArray& a, PTargetArray& b) {
    a.Swap(&b);
  }
  inline void Swap(PTargetArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTargetArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PTargetArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PTargetArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTargetArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PTargetArray& from) {
    PTargetArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTargetArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTargetArray";
  }
  protected:
  explicit PTargetArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 5,
    kUuidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLatestPositionFieldNumber = 3,
    kUpdateTimeFieldNumber = 4,
  };
  // repeated .PTarget targets = 5;
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  ::PTarget* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTarget >*
      mutable_targets();
  private:
  const ::PTarget& _internal_targets(int index) const;
  ::PTarget* _internal_add_targets();
  public:
  const ::PTarget& targets(int index) const;
  ::PTarget* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTarget >&
      targets() const;

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .PCoordinate latest_position = 3;
  bool has_latest_position() const;
  private:
  bool _internal_has_latest_position() const;
  public:
  void clear_latest_position();
  const ::PCoordinate& latest_position() const;
  PROTOBUF_NODISCARD ::PCoordinate* release_latest_position();
  ::PCoordinate* mutable_latest_position();
  void set_allocated_latest_position(::PCoordinate* latest_position);
  private:
  const ::PCoordinate& _internal_latest_position() const;
  ::PCoordinate* _internal_mutable_latest_position();
  public:
  void unsafe_arena_set_allocated_latest_position(
      ::PCoordinate* latest_position);
  ::PCoordinate* unsafe_arena_release_latest_position();

  // int64 update_time = 4;
  void clear_update_time();
  int64_t update_time() const;
  void set_update_time(int64_t value);
  private:
  int64_t _internal_update_time() const;
  void _internal_set_update_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTargetArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTarget > targets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PCoordinate* latest_position_;
    int64_t update_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTarget_2eproto;
};
// -------------------------------------------------------------------

class PIndexPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PIndexPoint) */ {
 public:
  inline PIndexPoint() : PIndexPoint(nullptr) {}
  ~PIndexPoint() override;
  explicit PROTOBUF_CONSTEXPR PIndexPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PIndexPoint(const PIndexPoint& from);
  PIndexPoint(PIndexPoint&& from) noexcept
    : PIndexPoint() {
    *this = ::std::move(from);
  }

  inline PIndexPoint& operator=(const PIndexPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PIndexPoint& operator=(PIndexPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PIndexPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PIndexPoint* internal_default_instance() {
    return reinterpret_cast<const PIndexPoint*>(
               &_PIndexPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PIndexPoint& a, PIndexPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PIndexPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PIndexPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PIndexPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PIndexPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PIndexPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PIndexPoint& from) {
    PIndexPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PIndexPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PIndexPoint";
  }
  protected:
  explicit PIndexPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PIndexPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTarget_2eproto;
};
// -------------------------------------------------------------------

class PIndexPointArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PIndexPointArray) */ {
 public:
  inline PIndexPointArray() : PIndexPointArray(nullptr) {}
  ~PIndexPointArray() override;
  explicit PROTOBUF_CONSTEXPR PIndexPointArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PIndexPointArray(const PIndexPointArray& from);
  PIndexPointArray(PIndexPointArray&& from) noexcept
    : PIndexPointArray() {
    *this = ::std::move(from);
  }

  inline PIndexPointArray& operator=(const PIndexPointArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline PIndexPointArray& operator=(PIndexPointArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PIndexPointArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const PIndexPointArray* internal_default_instance() {
    return reinterpret_cast<const PIndexPointArray*>(
               &_PIndexPointArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PIndexPointArray& a, PIndexPointArray& b) {
    a.Swap(&b);
  }
  inline void Swap(PIndexPointArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PIndexPointArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PIndexPointArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PIndexPointArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PIndexPointArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PIndexPointArray& from) {
    PIndexPointArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PIndexPointArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PIndexPointArray";
  }
  protected:
  explicit PIndexPointArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .PIndexPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::PIndexPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PIndexPoint >*
      mutable_points();
  private:
  const ::PIndexPoint& _internal_points(int index) const;
  ::PIndexPoint* _internal_add_points();
  public:
  const ::PIndexPoint& points(int index) const;
  ::PIndexPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PIndexPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:PIndexPointArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PIndexPoint > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTarget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PMat

// bytes data = 1;
inline void PMat::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PMat::data() const {
  // @@protoc_insertion_point(field_get:PMat.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PMat::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PMat.data)
}
inline std::string* PMat::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PMat.data)
  return _s;
}
inline const std::string& PMat::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PMat::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PMat::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PMat::release_data() {
  // @@protoc_insertion_point(field_release:PMat.data)
  return _impl_.data_.Release();
}
inline void PMat::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PMat.data)
}

// int64 size = 2;
inline void PMat::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t PMat::_internal_size() const {
  return _impl_.size_;
}
inline int64_t PMat::size() const {
  // @@protoc_insertion_point(field_get:PMat.size)
  return _internal_size();
}
inline void PMat::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void PMat::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PMat.size)
}

// int32 cols = 3;
inline void PMat::clear_cols() {
  _impl_.cols_ = 0;
}
inline int32_t PMat::_internal_cols() const {
  return _impl_.cols_;
}
inline int32_t PMat::cols() const {
  // @@protoc_insertion_point(field_get:PMat.cols)
  return _internal_cols();
}
inline void PMat::_internal_set_cols(int32_t value) {
  
  _impl_.cols_ = value;
}
inline void PMat::set_cols(int32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:PMat.cols)
}

// int32 rows = 4;
inline void PMat::clear_rows() {
  _impl_.rows_ = 0;
}
inline int32_t PMat::_internal_rows() const {
  return _impl_.rows_;
}
inline int32_t PMat::rows() const {
  // @@protoc_insertion_point(field_get:PMat.rows)
  return _internal_rows();
}
inline void PMat::_internal_set_rows(int32_t value) {
  
  _impl_.rows_ = value;
}
inline void PMat::set_rows(int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:PMat.rows)
}

// -------------------------------------------------------------------

// PCoordinate

// float x = 1;
inline void PCoordinate::clear_x() {
  _impl_.x_ = 0;
}
inline float PCoordinate::_internal_x() const {
  return _impl_.x_;
}
inline float PCoordinate::x() const {
  // @@protoc_insertion_point(field_get:PCoordinate.x)
  return _internal_x();
}
inline void PCoordinate::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PCoordinate::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PCoordinate.x)
}

// float y = 2;
inline void PCoordinate::clear_y() {
  _impl_.y_ = 0;
}
inline float PCoordinate::_internal_y() const {
  return _impl_.y_;
}
inline float PCoordinate::y() const {
  // @@protoc_insertion_point(field_get:PCoordinate.y)
  return _internal_y();
}
inline void PCoordinate::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PCoordinate::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PCoordinate.y)
}

// float z = 3;
inline void PCoordinate::clear_z() {
  _impl_.z_ = 0;
}
inline float PCoordinate::_internal_z() const {
  return _impl_.z_;
}
inline float PCoordinate::z() const {
  // @@protoc_insertion_point(field_get:PCoordinate.z)
  return _internal_z();
}
inline void PCoordinate::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PCoordinate::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PCoordinate.z)
}

// -------------------------------------------------------------------

// PTarget

// string uuid = 1;
inline void PTarget::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& PTarget::uuid() const {
  // @@protoc_insertion_point(field_get:PTarget.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PTarget::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTarget.uuid)
}
inline std::string* PTarget::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:PTarget.uuid)
  return _s;
}
inline const std::string& PTarget::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void PTarget::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PTarget::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PTarget::release_uuid() {
  // @@protoc_insertion_point(field_release:PTarget.uuid)
  return _impl_.uuid_.Release();
}
inline void PTarget::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTarget.uuid)
}

// string type = 2;
inline void PTarget::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& PTarget::type() const {
  // @@protoc_insertion_point(field_get:PTarget.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PTarget::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTarget.type)
}
inline std::string* PTarget::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:PTarget.type)
  return _s;
}
inline const std::string& PTarget::_internal_type() const {
  return _impl_.type_.Get();
}
inline void PTarget::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* PTarget::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* PTarget::release_type() {
  // @@protoc_insertion_point(field_release:PTarget.type)
  return _impl_.type_.Release();
}
inline void PTarget::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTarget.type)
}

// .PMat image = 3;
inline bool PTarget::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool PTarget::has_image() const {
  return _internal_has_image();
}
inline void PTarget::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::PMat& PTarget::_internal_image() const {
  const ::PMat* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::PMat&>(
      ::_PMat_default_instance_);
}
inline const ::PMat& PTarget::image() const {
  // @@protoc_insertion_point(field_get:PTarget.image)
  return _internal_image();
}
inline void PTarget::unsafe_arena_set_allocated_image(
    ::PMat* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTarget.image)
}
inline ::PMat* PTarget::release_image() {
  
  ::PMat* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PMat* PTarget::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:PTarget.image)
  
  ::PMat* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::PMat* PTarget::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::PMat>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::PMat* PTarget::mutable_image() {
  ::PMat* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:PTarget.image)
  return _msg;
}
inline void PTarget::set_allocated_image(::PMat* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:PTarget.image)
}

// .PCoordinate position = 4;
inline bool PTarget::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool PTarget::has_position() const {
  return _internal_has_position();
}
inline void PTarget::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::PCoordinate& PTarget::_internal_position() const {
  const ::PCoordinate* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::PCoordinate&>(
      ::_PCoordinate_default_instance_);
}
inline const ::PCoordinate& PTarget::position() const {
  // @@protoc_insertion_point(field_get:PTarget.position)
  return _internal_position();
}
inline void PTarget::unsafe_arena_set_allocated_position(
    ::PCoordinate* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTarget.position)
}
inline ::PCoordinate* PTarget::release_position() {
  
  ::PCoordinate* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PCoordinate* PTarget::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:PTarget.position)
  
  ::PCoordinate* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::PCoordinate* PTarget::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::PCoordinate>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::PCoordinate* PTarget::mutable_position() {
  ::PCoordinate* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:PTarget.position)
  return _msg;
}
inline void PTarget::set_allocated_position(::PCoordinate* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:PTarget.position)
}

// int64 time_stamp = 5;
inline void PTarget::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t PTarget::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t PTarget::time_stamp() const {
  // @@protoc_insertion_point(field_get:PTarget.time_stamp)
  return _internal_time_stamp();
}
inline void PTarget::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void PTarget::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:PTarget.time_stamp)
}

// -------------------------------------------------------------------

// PTargetArray

// string uuid = 1;
inline void PTargetArray::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& PTargetArray::uuid() const {
  // @@protoc_insertion_point(field_get:PTargetArray.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PTargetArray::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTargetArray.uuid)
}
inline std::string* PTargetArray::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:PTargetArray.uuid)
  return _s;
}
inline const std::string& PTargetArray::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void PTargetArray::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PTargetArray::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PTargetArray::release_uuid() {
  // @@protoc_insertion_point(field_release:PTargetArray.uuid)
  return _impl_.uuid_.Release();
}
inline void PTargetArray::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTargetArray.uuid)
}

// string type = 2;
inline void PTargetArray::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& PTargetArray::type() const {
  // @@protoc_insertion_point(field_get:PTargetArray.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PTargetArray::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTargetArray.type)
}
inline std::string* PTargetArray::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:PTargetArray.type)
  return _s;
}
inline const std::string& PTargetArray::_internal_type() const {
  return _impl_.type_.Get();
}
inline void PTargetArray::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* PTargetArray::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* PTargetArray::release_type() {
  // @@protoc_insertion_point(field_release:PTargetArray.type)
  return _impl_.type_.Release();
}
inline void PTargetArray::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTargetArray.type)
}

// .PCoordinate latest_position = 3;
inline bool PTargetArray::_internal_has_latest_position() const {
  return this != internal_default_instance() && _impl_.latest_position_ != nullptr;
}
inline bool PTargetArray::has_latest_position() const {
  return _internal_has_latest_position();
}
inline void PTargetArray::clear_latest_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.latest_position_ != nullptr) {
    delete _impl_.latest_position_;
  }
  _impl_.latest_position_ = nullptr;
}
inline const ::PCoordinate& PTargetArray::_internal_latest_position() const {
  const ::PCoordinate* p = _impl_.latest_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::PCoordinate&>(
      ::_PCoordinate_default_instance_);
}
inline const ::PCoordinate& PTargetArray::latest_position() const {
  // @@protoc_insertion_point(field_get:PTargetArray.latest_position)
  return _internal_latest_position();
}
inline void PTargetArray::unsafe_arena_set_allocated_latest_position(
    ::PCoordinate* latest_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latest_position_);
  }
  _impl_.latest_position_ = latest_position;
  if (latest_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTargetArray.latest_position)
}
inline ::PCoordinate* PTargetArray::release_latest_position() {
  
  ::PCoordinate* temp = _impl_.latest_position_;
  _impl_.latest_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PCoordinate* PTargetArray::unsafe_arena_release_latest_position() {
  // @@protoc_insertion_point(field_release:PTargetArray.latest_position)
  
  ::PCoordinate* temp = _impl_.latest_position_;
  _impl_.latest_position_ = nullptr;
  return temp;
}
inline ::PCoordinate* PTargetArray::_internal_mutable_latest_position() {
  
  if (_impl_.latest_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::PCoordinate>(GetArenaForAllocation());
    _impl_.latest_position_ = p;
  }
  return _impl_.latest_position_;
}
inline ::PCoordinate* PTargetArray::mutable_latest_position() {
  ::PCoordinate* _msg = _internal_mutable_latest_position();
  // @@protoc_insertion_point(field_mutable:PTargetArray.latest_position)
  return _msg;
}
inline void PTargetArray::set_allocated_latest_position(::PCoordinate* latest_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.latest_position_;
  }
  if (latest_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(latest_position);
    if (message_arena != submessage_arena) {
      latest_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.latest_position_ = latest_position;
  // @@protoc_insertion_point(field_set_allocated:PTargetArray.latest_position)
}

// int64 update_time = 4;
inline void PTargetArray::clear_update_time() {
  _impl_.update_time_ = int64_t{0};
}
inline int64_t PTargetArray::_internal_update_time() const {
  return _impl_.update_time_;
}
inline int64_t PTargetArray::update_time() const {
  // @@protoc_insertion_point(field_get:PTargetArray.update_time)
  return _internal_update_time();
}
inline void PTargetArray::_internal_set_update_time(int64_t value) {
  
  _impl_.update_time_ = value;
}
inline void PTargetArray::set_update_time(int64_t value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:PTargetArray.update_time)
}

// repeated .PTarget targets = 5;
inline int PTargetArray::_internal_targets_size() const {
  return _impl_.targets_.size();
}
inline int PTargetArray::targets_size() const {
  return _internal_targets_size();
}
inline void PTargetArray::clear_targets() {
  _impl_.targets_.Clear();
}
inline ::PTarget* PTargetArray::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:PTargetArray.targets)
  return _impl_.targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTarget >*
PTargetArray::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:PTargetArray.targets)
  return &_impl_.targets_;
}
inline const ::PTarget& PTargetArray::_internal_targets(int index) const {
  return _impl_.targets_.Get(index);
}
inline const ::PTarget& PTargetArray::targets(int index) const {
  // @@protoc_insertion_point(field_get:PTargetArray.targets)
  return _internal_targets(index);
}
inline ::PTarget* PTargetArray::_internal_add_targets() {
  return _impl_.targets_.Add();
}
inline ::PTarget* PTargetArray::add_targets() {
  ::PTarget* _add = _internal_add_targets();
  // @@protoc_insertion_point(field_add:PTargetArray.targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTarget >&
PTargetArray::targets() const {
  // @@protoc_insertion_point(field_list:PTargetArray.targets)
  return _impl_.targets_;
}

// -------------------------------------------------------------------

// PIndexPoint

// string uuid = 1;
inline void PIndexPoint::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& PIndexPoint::uuid() const {
  // @@protoc_insertion_point(field_get:PIndexPoint.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PIndexPoint::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PIndexPoint.uuid)
}
inline std::string* PIndexPoint::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:PIndexPoint.uuid)
  return _s;
}
inline const std::string& PIndexPoint::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void PIndexPoint::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PIndexPoint::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PIndexPoint::release_uuid() {
  // @@protoc_insertion_point(field_release:PIndexPoint.uuid)
  return _impl_.uuid_.Release();
}
inline void PIndexPoint::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PIndexPoint.uuid)
}

// float x = 2;
inline void PIndexPoint::clear_x() {
  _impl_.x_ = 0;
}
inline float PIndexPoint::_internal_x() const {
  return _impl_.x_;
}
inline float PIndexPoint::x() const {
  // @@protoc_insertion_point(field_get:PIndexPoint.x)
  return _internal_x();
}
inline void PIndexPoint::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PIndexPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PIndexPoint.x)
}

// float y = 3;
inline void PIndexPoint::clear_y() {
  _impl_.y_ = 0;
}
inline float PIndexPoint::_internal_y() const {
  return _impl_.y_;
}
inline float PIndexPoint::y() const {
  // @@protoc_insertion_point(field_get:PIndexPoint.y)
  return _internal_y();
}
inline void PIndexPoint::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PIndexPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PIndexPoint.y)
}

// float z = 4;
inline void PIndexPoint::clear_z() {
  _impl_.z_ = 0;
}
inline float PIndexPoint::_internal_z() const {
  return _impl_.z_;
}
inline float PIndexPoint::z() const {
  // @@protoc_insertion_point(field_get:PIndexPoint.z)
  return _internal_z();
}
inline void PIndexPoint::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PIndexPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PIndexPoint.z)
}

// -------------------------------------------------------------------

// PIndexPointArray

// repeated .PIndexPoint points = 1;
inline int PIndexPointArray::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PIndexPointArray::points_size() const {
  return _internal_points_size();
}
inline void PIndexPointArray::clear_points() {
  _impl_.points_.Clear();
}
inline ::PIndexPoint* PIndexPointArray::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:PIndexPointArray.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PIndexPoint >*
PIndexPointArray::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:PIndexPointArray.points)
  return &_impl_.points_;
}
inline const ::PIndexPoint& PIndexPointArray::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::PIndexPoint& PIndexPointArray::points(int index) const {
  // @@protoc_insertion_point(field_get:PIndexPointArray.points)
  return _internal_points(index);
}
inline ::PIndexPoint* PIndexPointArray::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::PIndexPoint* PIndexPointArray::add_points() {
  ::PIndexPoint* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:PIndexPointArray.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PIndexPoint >&
PIndexPointArray::points() const {
  // @@protoc_insertion_point(field_list:PIndexPointArray.points)
  return _impl_.points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTarget_2eproto
